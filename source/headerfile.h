#include "/usr/include/GL/glx.h"
Hooker<static, unsigned> l__inlineunsignedint__bswap_32("__inlineunsignedint__bswap_32");
Hooker<static, __uint64_t> l__inline__uint64_t__bswap_64("__inline__uint64_t__bswap_64");
Hooker<int, int, fd_set *, fd_set *, fd_set *, __sigset_t *> lpselect("pselect");
Hooker<unsigned, unsigned> lintgnu_dev_major("intgnu_dev_major");
Hooker<unsigned, unsigned> lintgnu_dev_minor("intgnu_dev_minor");
Hooker<unsigned, unsigned, unsigned> llonglongintgnu_dev_makedev("longlongintgnu_dev_makedev");
Hooker<int_Xmblen(*> lcharstr,intlen)("charstr,intlen)");
Hooker<int, )> lfree_private)("free_private)");
Hooker<XID, )> lresource_alloc)("resource_alloc)");
Hooker<int, )> lprivate15)("private15)");
Hooker<XFontStruct*, Display*, char*> lXLoadQueryFont("XLoadQueryFont");
Hooker<XFontStruct*, Display*, XID)> lXQueryFont("XQueryFont");
Hooker<XTimeCoord*, Display*, Window, Time, Time, int*> lXGetMotionEvents("XGetMotionEvents");
Hooker<XModifierKeymap*, XModifierKeymap*, KeyCode, int)> lXDeleteModifiermapEntry("XDeleteModifiermapEntry");
Hooker<XModifierKeymap*, Display*> lXGetModifierMapping("XGetModifierMapping");
Hooker<XModifierKeymap*, XModifierKeymap*, KeyCode, int)> lXInsertModifiermapEntry("XInsertModifiermapEntry");
Hooker<XModifierKeymap*, int)> lXNewModifiermap("XNewModifiermap");
Hooker<XImage*, Display*, Visual*, unsigned, int, int, char*, unsigned, unsigned, int, int)> lXCreateImage("XCreateImage");
Hooker<int, XImage*> lXInitImage("XInitImage");
Hooker<XImage*, Display*, Drawable, int, int, unsigned, unsigned, unsigned, int)> lXGetImage("XGetImage");
Hooker<XImage*, Display*, Drawable, int, int, unsigned, unsigned, unsigned, int, XImage*, int, int)> lXGetSubImage("XGetSubImage");
Hooker<Display*, char*> lXOpenDisplay("XOpenDisplay");
Hooker<void> lXrmInitialize("XrmInitialize");
Hooker<char*, Display*, int*> lXFetchBytes("XFetchBytes");
Hooker<char*, Display*, int*, int)> lXFetchBuffer("XFetchBuffer");
Hooker<char*, Display*, Atom)> lXGetAtomName("XGetAtomName");
Hooker<int, Display*, Atom*, int, char*> lXGetAtomNames("XGetAtomNames");
Hooker<char*, Display*, char*, char*> lXGetDefault("XGetDefault");
Hooker<char*, char*> lXDisplayName("XDisplayName");
Hooker<char*, KeySym)> lXKeysymToString("XKeysymToString");
Hooker<int, Display*, int))( Display*> lXSynchronize("XSynchronize");
Hooker<int, Display*, int (*> lXSetAfterFunction("XSetAfterFunction");
Hooker<Atom, Display*, char*, int)> lXInternAtom("XInternAtom");
Hooker<int, Display*, char*, int, int, Atom*> lXInternAtoms("XInternAtoms");
Hooker<Colormap, Display*, Colormap)> lXCopyColormapAndFree("XCopyColormapAndFree");
Hooker<Colormap, Display*, Window, Visual*, int)> lXCreateColormap("XCreateColormap");
Hooker<Cursor, Display*, Pixmap, Pixmap, XColor*, XColor*, unsigned, unsigned> lXCreatePixmapCursor("XCreatePixmapCursor");
Hooker<Cursor, Display*, Font, Font, unsigned, unsigned, XColor *, XColor *> lXCreateGlyphCursor("XCreateGlyphCursor");
Hooker<Cursor, Display*, unsigned> lXCreateFontCursor("XCreateFontCursor");
Hooker<Font, Display*, char*> lXLoadFont("XLoadFont");
Hooker<GC, Display*, Drawable, unsigned, XGCValues*> lXCreateGC("XCreateGC");
Hooker<GContext, GC)> lXGContextFromGC("XGContextFromGC");
Hooker<void, Display*, GC)> lXFlushGC("XFlushGC");
Hooker<Pixmap, Display*, Drawable, unsigned, unsigned, unsigned> lXCreatePixmap("XCreatePixmap");
Hooker<Pixmap, Display*, Drawable, char*, unsigned, unsigned> lXCreateBitmapFromData("XCreateBitmapFromData");
Hooker<Pixmap, Display*, Drawable, char*, unsigned, unsigned, unsigned, unsigned, unsigned> lXCreatePixmapFromBitmapData("XCreatePixmapFromBitmapData");
Hooker<Window, Display*, Window, int, int, unsigned, unsigned, unsigned, unsigned, unsigned> lXCreateSimpleWindow("XCreateSimpleWindow");
Hooker<Window, Display*, Atom)> lXGetSelectionOwner("XGetSelectionOwner");
Hooker<Window, Display*, Window, int, int, unsigned, unsigned, unsigned, int, unsigned, Visual*, unsigned, XSetWindowAttributes*> lXCreateWindow("XCreateWindow");
Hooker<Colormap*, Display*, Window, int*> lXListInstalledColormaps("XListInstalledColormaps");
Hooker<char*, Display*, char*, int, int*> lXListFonts("XListFonts");
Hooker<char*, Display*, char*, int, int*, XFontStruct*> lXListFontsWithInfo("XListFontsWithInfo");
Hooker<char*, Display*, int*> lXGetFontPath("XGetFontPath");
Hooker<char*, Display*, int*> lXListExtensions("XListExtensions");
Hooker<Atom*, Display*, Window, int*> lXListProperties("XListProperties");
Hooker<XHostAddress*, Display*, int*, int*> lXListHosts("XListHosts");
Hooker<KeySym, Display*, KeyCode, int)> lXKeycodeToKeysym("XKeycodeToKeysym");
Hooker<KeySym, XKeyEvent*, int)> lXLookupKeysym("XLookupKeysym");
Hooker<KeySym*, Display*, KeyCode, int, int*> lXGetKeyboardMapping("XGetKeyboardMapping");
Hooker<KeySym, char*> lXStringToKeysym("XStringToKeysym");
Hooker<long, Display*> lXMaxRequestSize("XMaxRequestSize");
Hooker<long, Display*> lXExtendedMaxRequestSize("XExtendedMaxRequestSize");
Hooker<char*, Display*> lXResourceManagerString("XResourceManagerString");
Hooker<char*, Screen*> lXScreenResourceString("XScreenResourceString");
Hooker<unsigned, Display*> llongXDisplayMotionBufferSize("longXDisplayMotionBufferSize");
Hooker<VisualID, Visual*> lXVisualIDFromVisual("XVisualIDFromVisual");
Hooker<int> lXInitThreads("XInitThreads");
Hooker<void, Display*> lXLockDisplay("XLockDisplay");
Hooker<void, Display*> lXUnlockDisplay("XUnlockDisplay");
Hooker<XExtCodes*, Display*, char*> lXInitExtension("XInitExtension");
Hooker<XExtCodes*, Display*> lXAddExtension("XAddExtension");
Hooker<XExtData*, XExtData*, int)> lXFindOnExtensionList("XFindOnExtensionList");
Hooker<XExtData*, XEDataObject)> lXEHeadOfExtensionList("XEHeadOfExtensionList");
Hooker<Window, Display*, int)> lXRootWindow("XRootWindow");
Hooker<Window, Display*> lXDefaultRootWindow("XDefaultRootWindow");
Hooker<Window, Screen*> lXRootWindowOfScreen("XRootWindowOfScreen");
Hooker<Visual*, Display*, int)> lXDefaultVisual("XDefaultVisual");
Hooker<Visual*, Screen*> lXDefaultVisualOfScreen("XDefaultVisualOfScreen");
Hooker<GC, Display*, int)> lXDefaultGC("XDefaultGC");
Hooker<GC, Screen*> lXDefaultGCOfScreen("XDefaultGCOfScreen");
Hooker<unsigned, Display*, int)> llongXBlackPixel("longXBlackPixel");
Hooker<unsigned, Display*, int)> llongXWhitePixel("longXWhitePixel");
Hooker<unsigned> llongXAllPlanes("longXAllPlanes");
Hooker<unsigned, Screen*> llongXBlackPixelOfScreen("longXBlackPixelOfScreen");
Hooker<unsigned, Screen*> llongXWhitePixelOfScreen("longXWhitePixelOfScreen");
Hooker<unsigned, Display*> llongXNextRequest("longXNextRequest");
Hooker<unsigned, Display*> llongXLastKnownRequestProcessed("longXLastKnownRequestProcessed");
Hooker<char*, Display*> lXServerVendor("XServerVendor");
Hooker<char*, Display*> lXDisplayString("XDisplayString");
Hooker<Colormap, Display*, int)> lXDefaultColormap("XDefaultColormap");
Hooker<Colormap, Screen*> lXDefaultColormapOfScreen("XDefaultColormapOfScreen");
Hooker<Display*, Screen*> lXDisplayOfScreen("XDisplayOfScreen");
Hooker<Screen*, Display*, int)> lXScreenOfDisplay("XScreenOfDisplay");
Hooker<Screen*, Display*> lXDefaultScreenOfDisplay("XDefaultScreenOfDisplay");
Hooker<long, Screen*> lXEventMaskOfScreen("XEventMaskOfScreen");
Hooker<int, Screen*> lXScreenNumberOfScreen("XScreenNumberOfScreen");
Hooker<XErrorHandler, XErrorHandler)> lXSetErrorHandler("XSetErrorHandler");
Hooker<XIOErrorHandler, XIOErrorHandler)> lXSetIOErrorHandler("XSetIOErrorHandler");
Hooker<XPixmapFormatValues*, Display*, int*> lXListPixmapFormats("XListPixmapFormats");
Hooker<int*, Display*, int, int*> lXListDepths("XListDepths");
Hooker<int, Display*, Window, int, unsigned, XWindowChanges*> lXReconfigureWMWindow("XReconfigureWMWindow");
Hooker<int, Display*, Window, Atom*, int*> lXGetWMProtocols("XGetWMProtocols");
Hooker<int, Display*, Window, Atom*, int)> lXSetWMProtocols("XSetWMProtocols");
Hooker<int, Display*, Window, int)> lXIconifyWindow("XIconifyWindow");
Hooker<int, Display*, Window, int)> lXWithdrawWindow("XWithdrawWindow");
Hooker<int, Display*, Window, char*, int*> lXGetCommand("XGetCommand");
Hooker<int, Display*, Window, Window*, int*> lXGetWMColormapWindows("XGetWMColormapWindows");
Hooker<int, Display*, Window, Window*, int)> lXSetWMColormapWindows("XSetWMColormapWindows");
Hooker<void, char*> lXFreeStringList("XFreeStringList");
Hooker<int, Display*, Window, Window)> lXSetTransientForHint("XSetTransientForHint");
Hooker<int, Display*> lXActivateScreenSaver("XActivateScreenSaver");
Hooker<int, Display*, XHostAddress*> lXAddHost("XAddHost");
Hooker<int, Display*, XHostAddress*, int)> lXAddHosts("XAddHosts");
Hooker<int, XExtData*> lXAddToExtensionList("XAddToExtensionList");
Hooker<int, Display*, Window)> lXAddToSaveSet("XAddToSaveSet");
Hooker<int, Display*, Colormap, XColor*> lXAllocColor("XAllocColor");
Hooker<int, Display*, Colormap, int, unsigned long*, unsigned, unsigned long*, unsigned> lXAllocColorCells("XAllocColorCells");
Hooker<int, Display*, Colormap, int, unsigned long*, int, int, int, int, unsigned long*, unsigned long*, unsigned long*> lXAllocColorPlanes("XAllocColorPlanes");
Hooker<int, Display*, Colormap, char*, XColor*, XColor*> lXAllocNamedColor("XAllocNamedColor");
Hooker<int, Display*, int, Time)> lXAllowEvents("XAllowEvents");
Hooker<int, Display*> lXAutoRepeatOff("XAutoRepeatOff");
Hooker<int, Display*> lXAutoRepeatOn("XAutoRepeatOn");
Hooker<int, Display*, int)> lXBell("XBell");
Hooker<int, Display*> lXBitmapBitOrder("XBitmapBitOrder");
Hooker<int, Display*> lXBitmapPad("XBitmapPad");
Hooker<int, Display*> lXBitmapUnit("XBitmapUnit");
Hooker<int, Screen*> lXCellsOfScreen("XCellsOfScreen");
Hooker<int, Display*, unsigned, Cursor, Time)> lXChangeActivePointerGrab("XChangeActivePointerGrab");
Hooker<int, Display*, GC, unsigned, XGCValues*> lXChangeGC("XChangeGC");
Hooker<int, Display*, unsigned, XKeyboardControl*> lXChangeKeyboardControl("XChangeKeyboardControl");
Hooker<int, Display*, int, int, KeySym*, int)> lXChangeKeyboardMapping("XChangeKeyboardMapping");
Hooker<int, Display*, int, int, int, int, int)> lXChangePointerControl("XChangePointerControl");
Hooker<int, Display*, Window, Atom, Atom, int, int, unsigned char*, int)> lXChangeProperty("XChangeProperty");
Hooker<int, Display*, Window, int)> lXChangeSaveSet("XChangeSaveSet");
Hooker<int, Display*, Window, unsigned, XSetWindowAttributes*> lXChangeWindowAttributes("XChangeWindowAttributes");
Hooker<int, Display*, XEvent*, int (*, XEvent*, XPointer, XPointer)> lXCheckIfEvent("XCheckIfEvent");
Hooker<int, Display*, long, XEvent*> lXCheckMaskEvent("XCheckMaskEvent");
Hooker<int, Display*, int, XEvent*> lXCheckTypedEvent("XCheckTypedEvent");
Hooker<int, Display*, Window, int, XEvent*> lXCheckTypedWindowEvent("XCheckTypedWindowEvent");
Hooker<int, Display*, Window, long, XEvent*> lXCheckWindowEvent("XCheckWindowEvent");
Hooker<int, Display*, Window, int)> lXCirculateSubwindows("XCirculateSubwindows");
Hooker<int, Display*, Window)> lXCirculateSubwindowsDown("XCirculateSubwindowsDown");
Hooker<int, Display*, Window)> lXCirculateSubwindowsUp("XCirculateSubwindowsUp");
Hooker<int, Display*, Window, int, int, unsigned, unsigned, int)> lXClearArea("XClearArea");
Hooker<int, Display*, Window)> lXClearWindow("XClearWindow");
Hooker<int, Display*> lXCloseDisplay("XCloseDisplay");
Hooker<int, Display*, Window, unsigned, XWindowChanges*> lXConfigureWindow("XConfigureWindow");
Hooker<int, Display*> lXConnectionNumber("XConnectionNumber");
Hooker<int, Display*, Atom, Atom, Atom, Window, Time)> lXConvertSelection("XConvertSelection");
Hooker<int, Display*, Drawable, Drawable, GC, int, int, unsigned, unsigned, int, int)> lXCopyArea("XCopyArea");
Hooker<int, Display*, GC, unsigned, GC)> lXCopyGC("XCopyGC");
Hooker<int, Display*, Drawable, Drawable, GC, int, int, unsigned, unsigned, int, int, unsigned> lXCopyPlane("XCopyPlane");
Hooker<int, Display*, int)> lXDefaultDepth("XDefaultDepth");
Hooker<int, Screen*> lXDefaultDepthOfScreen("XDefaultDepthOfScreen");
Hooker<int, Display*> lXDefaultScreen("XDefaultScreen");
Hooker<int, Display*, Window, Cursor)> lXDefineCursor("XDefineCursor");
Hooker<int, Display*, Window, Atom)> lXDeleteProperty("XDeleteProperty");
Hooker<int, Display*, Window)> lXDestroyWindow("XDestroyWindow");
Hooker<int, Display*, Window)> lXDestroySubwindows("XDestroySubwindows");
Hooker<int, Screen*> lXDoesBackingStore("XDoesBackingStore");
Hooker<int, Screen*> lXDoesSaveUnders("XDoesSaveUnders");
Hooker<int, Display*> lXDisableAccessControl("XDisableAccessControl");
Hooker<int, Display*, int)> lXDisplayCells("XDisplayCells");
Hooker<int, Display*, int)> lXDisplayHeight("XDisplayHeight");
Hooker<int, Display*, int)> lXDisplayHeightMM("XDisplayHeightMM");
Hooker<int, Display*, int*, int*> lXDisplayKeycodes("XDisplayKeycodes");
Hooker<int, Display*, int)> lXDisplayPlanes("XDisplayPlanes");
Hooker<int, Display*, int)> lXDisplayWidth("XDisplayWidth");
Hooker<int, Display*, int)> lXDisplayWidthMM("XDisplayWidthMM");
Hooker<int, Display*, Drawable, GC, int, int, unsigned, unsigned, int, int)> lXDrawArc("XDrawArc");
Hooker<int, Display*, Drawable, GC, XArc*, int)> lXDrawArcs("XDrawArcs");
Hooker<int, Display*, Drawable, GC, int, int, char*, int)> lXDrawImageString("XDrawImageString");
Hooker<int, Display*, Drawable, GC, int, int, XChar2b*, int)> lXDrawImageString16("XDrawImageString16");
Hooker<int, Display*, Drawable, GC, int, int, int, int)> lXDrawLine("XDrawLine");
Hooker<int, Display*, Drawable, GC, XPoint*, int, int)> lXDrawLines("XDrawLines");
Hooker<int, Display*, Drawable, GC, int, int)> lXDrawPoint("XDrawPoint");
Hooker<int, Display*, Drawable, GC, XPoint*, int, int)> lXDrawPoints("XDrawPoints");
Hooker<int, Display*, Drawable, GC, int, int, unsigned, unsigned> lXDrawRectangle("XDrawRectangle");
Hooker<int, Display*, Drawable, GC, XRectangle*, int)> lXDrawRectangles("XDrawRectangles");
Hooker<int, Display*, Drawable, GC, XSegment*, int)> lXDrawSegments("XDrawSegments");
Hooker<int, Display*, Drawable, GC, int, int, char*, int)> lXDrawString("XDrawString");
Hooker<int, Display*, Drawable, GC, int, int, XChar2b*, int)> lXDrawString16("XDrawString16");
Hooker<int, Display*, Drawable, GC, int, int, XTextItem*, int)> lXDrawText("XDrawText");
Hooker<int, Display*, Drawable, GC, int, int, XTextItem16*, int)> lXDrawText16("XDrawText16");
Hooker<int, Display*> lXEnableAccessControl("XEnableAccessControl");
Hooker<int, Display*, int)> lXEventsQueued("XEventsQueued");
Hooker<int, Display*, Window, char*> lXFetchName("XFetchName");
Hooker<int, Display*, Drawable, GC, int, int, unsigned, unsigned, int, int)> lXFillArc("XFillArc");
Hooker<int, Display*, Drawable, GC, XArc*, int)> lXFillArcs("XFillArcs");
Hooker<int, Display*, Drawable, GC, XPoint*, int, int, int)> lXFillPolygon("XFillPolygon");
Hooker<int, Display*, Drawable, GC, int, int, unsigned, unsigned> lXFillRectangle("XFillRectangle");
Hooker<int, Display*, Drawable, GC, XRectangle*, int)> lXFillRectangles("XFillRectangles");
Hooker<int, Display*> lXFlush("XFlush");
Hooker<int, Display*, int)> lXForceScreenSaver("XForceScreenSaver");
Hooker<int> lXFree("XFree");
Hooker<int, Display*, Colormap)> lXFreeColormap("XFreeColormap");
Hooker<int, Display*, Colormap, unsigned long*, int, unsigned> lXFreeColors("XFreeColors");
Hooker<int, Display*, Cursor)> lXFreeCursor("XFreeCursor");
Hooker<int, char*> lXFreeExtensionList("XFreeExtensionList");
Hooker<int, Display*, XFontStruct*> lXFreeFont("XFreeFont");
Hooker<int, char*, XFontStruct*, int)> lXFreeFontInfo("XFreeFontInfo");
Hooker<int, char*> lXFreeFontNames("XFreeFontNames");
Hooker<int, char*> lXFreeFontPath("XFreeFontPath");
Hooker<int, Display*, GC)> lXFreeGC("XFreeGC");
Hooker<int, XModifierKeymap*> lXFreeModifiermap("XFreeModifiermap");
Hooker<int, Display*, Pixmap)> lXFreePixmap("XFreePixmap");
Hooker<int, Display*, int, char*, char*, unsigned, unsigned, unsigned, int, int, int*, int*, int*, int*> lXGeometry("XGeometry");
Hooker<int, Display*, char*, char*, char*, char*, int)> lXGetErrorDatabaseText("XGetErrorDatabaseText");
Hooker<int, Display*, int, char*, int)> lXGetErrorText("XGetErrorText");
Hooker<int, XFontStruct*, Atom, unsigned long*> lXGetFontProperty("XGetFontProperty");
Hooker<int, Display*, GC, unsigned, XGCValues*> lXGetGCValues("XGetGCValues");
Hooker<int, Display*, Drawable, Window*, int*, int*, unsigned int*, unsigned int*, unsigned int*, unsigned int*> lXGetGeometry("XGetGeometry");
Hooker<int, Display*, Window, char*> lXGetIconName("XGetIconName");
Hooker<int, Display*, Window*, int*> lXGetInputFocus("XGetInputFocus");
Hooker<int, Display*, XKeyboardState*> lXGetKeyboardControl("XGetKeyboardControl");
Hooker<int, Display*, int*, int*, int*> lXGetPointerControl("XGetPointerControl");
Hooker<int, Display*, unsigned char*, int)> lXGetPointerMapping("XGetPointerMapping");
Hooker<int, Display*, int*, int*, int*, int*> lXGetScreenSaver("XGetScreenSaver");
Hooker<int, Display*, Window, Window*> lXGetTransientForHint("XGetTransientForHint");
Hooker<int, Display*, Window, Atom, long, long, int, Atom, Atom*, int*, unsigned long*, unsigned long*, unsigned char*> lXGetWindowProperty("XGetWindowProperty");
Hooker<int, Display*, Window, XWindowAttributes*> lXGetWindowAttributes("XGetWindowAttributes");
Hooker<int, Display*, unsigned, unsigned, Window, int, unsigned, int, int, Window, Cursor)> lXGrabButton("XGrabButton");
Hooker<int, Display*, int, unsigned, Window, int, int, int)> lXGrabKey("XGrabKey");
Hooker<int, Display*, Window, int, int, int, Time)> lXGrabKeyboard("XGrabKeyboard");
Hooker<int, Display*, Window, int, unsigned, int, int, Window, Cursor, Time)> lXGrabPointer("XGrabPointer");
Hooker<int, Display*> lXGrabServer("XGrabServer");
Hooker<int, Screen*> lXHeightMMOfScreen("XHeightMMOfScreen");
Hooker<int, Screen*> lXHeightOfScreen("XHeightOfScreen");
Hooker<int, Display*, XEvent*, int (*, XEvent*, XPointer, XPointer)> lXIfEvent("XIfEvent");
Hooker<int, Display*> lXImageByteOrder("XImageByteOrder");
Hooker<int, Display*, Colormap)> lXInstallColormap("XInstallColormap");
Hooker<KeyCode, Display*, KeySym)> lXKeysymToKeycode("XKeysymToKeycode");
Hooker<int, Display*, XID)> lXKillClient("XKillClient");
Hooker<int, Display*, Colormap, char*, XColor*, XColor*> lXLookupColor("XLookupColor");
Hooker<int, Display*, Window)> lXLowerWindow("XLowerWindow");
Hooker<int, Display*, Window)> lXMapRaised("XMapRaised");
Hooker<int, Display*, Window)> lXMapSubwindows("XMapSubwindows");
Hooker<int, Display*, Window)> lXMapWindow("XMapWindow");
Hooker<int, Display*, long, XEvent*> lXMaskEvent("XMaskEvent");
Hooker<int, Screen*> lXMaxCmapsOfScreen("XMaxCmapsOfScreen");
Hooker<int, Screen*> lXMinCmapsOfScreen("XMinCmapsOfScreen");
Hooker<int, Display*, Window, int, int, unsigned, unsigned> lXMoveResizeWindow("XMoveResizeWindow");
Hooker<int, Display*, Window, int, int)> lXMoveWindow("XMoveWindow");
Hooker<int, Display*, XEvent*> lXNextEvent("XNextEvent");
Hooker<int, Display*> lXNoOp("XNoOp");
Hooker<int, Display*, Colormap, char*, XColor*> lXParseColor("XParseColor");
Hooker<int, char*, int*, int*, unsigned int*, unsigned int*> lXParseGeometry("XParseGeometry");
Hooker<int, Display*, XEvent*> lXPeekEvent("XPeekEvent");
Hooker<int, Display*, XEvent*, int (*, XEvent*, XPointer, XPointer)> lXPeekIfEvent("XPeekIfEvent");
Hooker<int, Display*> lXPending("XPending");
Hooker<int, Screen*> lXPlanesOfScreen("XPlanesOfScreen");
Hooker<int, Display*> lXProtocolRevision("XProtocolRevision");
Hooker<int, Display*> lXProtocolVersion("XProtocolVersion");
Hooker<int, Display*, XEvent*> lXPutBackEvent("XPutBackEvent");
Hooker<int, Display*, Drawable, GC, XImage*, int, int, int, int, unsigned, unsigned> lXPutImage("XPutImage");
Hooker<int, Display*> lXQLength("XQLength");
Hooker<int, Display*, Drawable, unsigned, unsigned, unsigned int*, unsigned int*> lXQueryBestCursor("XQueryBestCursor");
Hooker<int, Display*, int, Drawable, unsigned, unsigned, unsigned int*, unsigned int*> lXQueryBestSize("XQueryBestSize");
Hooker<int, Display*, Drawable, unsigned, unsigned, unsigned int*, unsigned int*> lXQueryBestStipple("XQueryBestStipple");
Hooker<int, Display*, Drawable, unsigned, unsigned, unsigned int*, unsigned int*> lXQueryBestTile("XQueryBestTile");
Hooker<int, Display*, Colormap, XColor*> lXQueryColor("XQueryColor");
Hooker<int, Display*, Colormap, XColor*, int)> lXQueryColors("XQueryColors");
Hooker<int, Display*, char*, int*, int*, int*> lXQueryExtension("XQueryExtension");
Hooker<int, Display*, )> lXQueryKeymap("XQueryKeymap");
Hooker<int, Display*, Window, Window*, Window*, int*, int*, int*, int*, unsigned int*> lXQueryPointer("XQueryPointer");
Hooker<int, Display*, XID, char*, int, int*, int*, int*, XCharStruct*> lXQueryTextExtents("XQueryTextExtents");
Hooker<int, Display*, XID, XChar2b*, int, int*, int*, int*, XCharStruct*> lXQueryTextExtents16("XQueryTextExtents16");
Hooker<int, Display*, Window, Window*, Window*, Window*, unsigned int*> lXQueryTree("XQueryTree");
Hooker<int, Display*, Window)> lXRaiseWindow("XRaiseWindow");
Hooker<int, Display*, Drawable, char*, unsigned int*, unsigned int*, Pixmap*, int*, int*> lXReadBitmapFile("XReadBitmapFile");
Hooker<int, char*, unsigned int*, unsigned int*, unsigned char*, int*, int*> lXReadBitmapFileData("XReadBitmapFileData");
Hooker<int, Display*, KeySym, KeySym*, int, unsigned char*, int)> lXRebindKeysym("XRebindKeysym");
Hooker<int, Display*, Cursor, XColor*, XColor*> lXRecolorCursor("XRecolorCursor");
Hooker<int, XMappingEvent*> lXRefreshKeyboardMapping("XRefreshKeyboardMapping");
Hooker<int, Display*, Window)> lXRemoveFromSaveSet("XRemoveFromSaveSet");
Hooker<int, Display*, XHostAddress*> lXRemoveHost("XRemoveHost");
Hooker<int, Display*, XHostAddress*, int)> lXRemoveHosts("XRemoveHosts");
Hooker<int, Display*, Window, Window, int, int)> lXReparentWindow("XReparentWindow");
Hooker<int, Display*> lXResetScreenSaver("XResetScreenSaver");
Hooker<int, Display*, Window, unsigned, unsigned> lXResizeWindow("XResizeWindow");
Hooker<int, Display*, Window*, int)> lXRestackWindows("XRestackWindows");
Hooker<int, Display*, int)> lXRotateBuffers("XRotateBuffers");
Hooker<int, Display*, Window, Atom*, int, int)> lXRotateWindowProperties("XRotateWindowProperties");
Hooker<int, Display*> lXScreenCount("XScreenCount");
Hooker<int, Display*, Window, long)> lXSelectInput("XSelectInput");
Hooker<int, Display*, Window, int, long, XEvent*> lXSendEvent("XSendEvent");
Hooker<int, Display*, int)> lXSetAccessControl("XSetAccessControl");
Hooker<int, Display*, GC, int)> lXSetArcMode("XSetArcMode");
Hooker<int, Display*, GC, unsigned> lXSetBackground("XSetBackground");
Hooker<int, Display*, GC, Pixmap)> lXSetClipMask("XSetClipMask");
Hooker<int, Display*, GC, int, int)> lXSetClipOrigin("XSetClipOrigin");
Hooker<int, Display*, GC, int, int, XRectangle*, int, int)> lXSetClipRectangles("XSetClipRectangles");
Hooker<int, Display*, int)> lXSetCloseDownMode("XSetCloseDownMode");
Hooker<int, Display*, Window, char*, int)> lXSetCommand("XSetCommand");
Hooker<int, Display*, GC, int, char*, int)> lXSetDashes("XSetDashes");
Hooker<int, Display*, GC, int)> lXSetFillRule("XSetFillRule");
Hooker<int, Display*, GC, int)> lXSetFillStyle("XSetFillStyle");
Hooker<int, Display*, GC, Font)> lXSetFont("XSetFont");
Hooker<int, Display*, char*, int)> lXSetFontPath("XSetFontPath");
Hooker<int, Display*, GC, unsigned> lXSetForeground("XSetForeground");
Hooker<int, Display*, GC, int)> lXSetFunction("XSetFunction");
Hooker<int, Display*, GC, int)> lXSetGraphicsExposures("XSetGraphicsExposures");
Hooker<int, Display*, Window, char*> lXSetIconName("XSetIconName");
Hooker<int, Display*, Window, int, Time)> lXSetInputFocus("XSetInputFocus");
Hooker<int, Display*, GC, unsigned, int, int, int)> lXSetLineAttributes("XSetLineAttributes");
Hooker<int, Display*, XModifierKeymap*> lXSetModifierMapping("XSetModifierMapping");
Hooker<int, Display*, GC, unsigned> lXSetPlaneMask("XSetPlaneMask");
Hooker<int, Display*, unsigned char*, int)> lXSetPointerMapping("XSetPointerMapping");
Hooker<int, Display*, int, int, int, int)> lXSetScreenSaver("XSetScreenSaver");
Hooker<int, Display*, Atom, Window, Time)> lXSetSelectionOwner("XSetSelectionOwner");
Hooker<int, Display*, GC, unsigned, unsigned, int, unsigned> lXSetState("XSetState");
Hooker<int, Display*, GC, Pixmap)> lXSetStipple("XSetStipple");
Hooker<int, Display*, GC, int)> lXSetSubwindowMode("XSetSubwindowMode");
Hooker<int, Display*, GC, int, int)> lXSetTSOrigin("XSetTSOrigin");
Hooker<int, Display*, GC, Pixmap)> lXSetTile("XSetTile");
Hooker<int, Display*, Window, unsigned> lXSetWindowBackground("XSetWindowBackground");
Hooker<int, Display*, Window, Pixmap)> lXSetWindowBackgroundPixmap("XSetWindowBackgroundPixmap");
Hooker<int, Display*, Window, unsigned> lXSetWindowBorder("XSetWindowBorder");
Hooker<int, Display*, Window, Pixmap)> lXSetWindowBorderPixmap("XSetWindowBorderPixmap");
Hooker<int, Display*, Window, unsigned> lXSetWindowBorderWidth("XSetWindowBorderWidth");
Hooker<int, Display*, Window, Colormap)> lXSetWindowColormap("XSetWindowColormap");
Hooker<int, Display*, char*, int, int)> lXStoreBuffer("XStoreBuffer");
Hooker<int, Display*, char*, int)> lXStoreBytes("XStoreBytes");
Hooker<int, Display*, Colormap, XColor*> lXStoreColor("XStoreColor");
Hooker<int, Display*, Colormap, XColor*, int)> lXStoreColors("XStoreColors");
Hooker<int, Display*, Window, char*> lXStoreName("XStoreName");
Hooker<int, Display*, Colormap, char*, unsigned, int)> lXStoreNamedColor("XStoreNamedColor");
Hooker<int, Display*, int)> lXSync("XSync");
Hooker<int, XFontStruct*, char*, int, int*, int*, int*, XCharStruct*> lXTextExtents("XTextExtents");
Hooker<int, XFontStruct*, XChar2b*, int, int*, int*, int*, XCharStruct*> lXTextExtents16("XTextExtents16");
Hooker<int, XFontStruct*, char*, int)> lXTextWidth("XTextWidth");
Hooker<int, XFontStruct*, XChar2b*, int)> lXTextWidth16("XTextWidth16");
Hooker<int, Display*, Window, Window, int, int, int*, int*, Window*> lXTranslateCoordinates("XTranslateCoordinates");
Hooker<int, Display*, Window)> lXUndefineCursor("XUndefineCursor");
Hooker<int, Display*, unsigned, unsigned, Window)> lXUngrabButton("XUngrabButton");
Hooker<int, Display*, int, unsigned, Window)> lXUngrabKey("XUngrabKey");
Hooker<int, Display*, Time)> lXUngrabKeyboard("XUngrabKeyboard");
Hooker<int, Display*, Time)> lXUngrabPointer("XUngrabPointer");
Hooker<int, Display*> lXUngrabServer("XUngrabServer");
Hooker<int, Display*, Colormap)> lXUninstallColormap("XUninstallColormap");
Hooker<int, Display*, Font)> lXUnloadFont("XUnloadFont");
Hooker<int, Display*, Window)> lXUnmapSubwindows("XUnmapSubwindows");
Hooker<int, Display*, Window)> lXUnmapWindow("XUnmapWindow");
Hooker<int, Display*> lXVendorRelease("XVendorRelease");
Hooker<int, Display*, Window, Window, int, int, unsigned, unsigned, int, int)> lXWarpPointer("XWarpPointer");
Hooker<int, Screen*> lXWidthMMOfScreen("XWidthMMOfScreen");
Hooker<int, Screen*> lXWidthOfScreen("XWidthOfScreen");
Hooker<int, Display*, Window, long, XEvent*> lXWindowEvent("XWindowEvent");
Hooker<int, Display*, char*, Pixmap, unsigned, unsigned, int, int)> lXWriteBitmapFile("XWriteBitmapFile");
Hooker<int> lXSupportsLocale("XSupportsLocale");
Hooker<char*, char*> lXSetLocaleModifiers("XSetLocaleModifiers");
Hooker<XOM, Display*, char*, char*> lXOpenOM("XOpenOM");
Hooker<int, XOM)> lXCloseOM("XCloseOM");
Hooker<char*, XOM, ...)> lXSetOMValues("XSetOMValues");
Hooker<char*, XOM, ...)> lXGetOMValues("XGetOMValues");
Hooker<Display*, XOM)> lXDisplayOfOM("XDisplayOfOM");
Hooker<char*, XOM)> lXLocaleOfOM("XLocaleOfOM");
Hooker<XOC, XOM, ...)> lXCreateOC("XCreateOC");
Hooker<void, XOC)> lXDestroyOC("XDestroyOC");
Hooker<XOM, XOC)> lXOMOfOC("XOMOfOC");
Hooker<char*, XOC, ...)> lXSetOCValues("XSetOCValues");
Hooker<char*, XOC, ...)> lXGetOCValues("XGetOCValues");
Hooker<XFontSet, Display*, char*, char*, int*, char*> lXCreateFontSet("XCreateFontSet");
Hooker<void, Display*, XFontSet)> lXFreeFontSet("XFreeFontSet");
Hooker<int, XFontSet, XFontStruct*, char*> lXFontsOfFontSet("XFontsOfFontSet");
Hooker<char*, XFontSet)> lXBaseFontNameListOfFontSet("XBaseFontNameListOfFontSet");
Hooker<char*, XFontSet)> lXLocaleOfFontSet("XLocaleOfFontSet");
Hooker<int, XFontSet)> lXContextDependentDrawing("XContextDependentDrawing");
Hooker<int, XFontSet)> lXDirectionalDependentDrawing("XDirectionalDependentDrawing");
Hooker<int, XFontSet)> lXContextualDrawing("XContextualDrawing");
Hooker<XFontSetExtents*, XFontSet)> lXExtentsOfFontSet("XExtentsOfFontSet");
Hooker<int, XFontSet, char*, int)> lXmbTextEscapement("XmbTextEscapement");
Hooker<int, XFontSet, wchar_t*, int)> lXwcTextEscapement("XwcTextEscapement");
Hooker<int, XFontSet, char*, int)> lXutf8TextEscapement("Xutf8TextEscapement");
Hooker<int, XFontSet, char*, int, XRectangle*, XRectangle*> lXmbTextExtents("XmbTextExtents");
Hooker<int, XFontSet, wchar_t*, int, XRectangle*, XRectangle*> lXwcTextExtents("XwcTextExtents");
Hooker<int, XFontSet, char*, int, XRectangle*, XRectangle*> lXutf8TextExtents("Xutf8TextExtents");
Hooker<int, XFontSet, char*, int, XRectangle*, XRectangle*, int, int*, XRectangle*, XRectangle*> lXmbTextPerCharExtents("XmbTextPerCharExtents");
Hooker<int, XFontSet, wchar_t*, int, XRectangle*, XRectangle*, int, int*, XRectangle*, XRectangle*> lXwcTextPerCharExtents("XwcTextPerCharExtents");
Hooker<int, XFontSet, char*, int, XRectangle*, XRectangle*, int, int*, XRectangle*, XRectangle*> lXutf8TextPerCharExtents("Xutf8TextPerCharExtents");
Hooker<void, Display*, Drawable, GC, int, int, XmbTextItem*, int)> lXmbDrawText("XmbDrawText");
Hooker<void, Display*, Drawable, GC, int, int, XwcTextItem*, int)> lXwcDrawText("XwcDrawText");
Hooker<void, Display*, Drawable, GC, int, int, XmbTextItem*, int)> lXutf8DrawText("Xutf8DrawText");
Hooker<void, Display*, Drawable, XFontSet, GC, int, int, char*, int)> lXmbDrawString("XmbDrawString");
Hooker<void, Display*, Drawable, XFontSet, GC, int, int, wchar_t*, int)> lXwcDrawString("XwcDrawString");
Hooker<void, Display*, Drawable, XFontSet, GC, int, int, char*, int)> lXutf8DrawString("Xutf8DrawString");
Hooker<void, Display*, Drawable, XFontSet, GC, int, int, char*, int)> lXmbDrawImageString("XmbDrawImageString");
Hooker<void, Display*, Drawable, XFontSet, GC, int, int, wchar_t*, int)> lXwcDrawImageString("XwcDrawImageString");
Hooker<void, Display*, Drawable, XFontSet, GC, int, int, char*, int)> lXutf8DrawImageString("Xutf8DrawImageString");
Hooker<XIM, Display*, char*, char*> lXOpenIM("XOpenIM");
Hooker<int, XIM)> lXCloseIM("XCloseIM");
Hooker<char*, XIM, ...)> lXGetIMValues("XGetIMValues");
Hooker<char*, XIM, ...)> lXSetIMValues("XSetIMValues");
Hooker<Display*, XIM)> lXDisplayOfIM("XDisplayOfIM");
Hooker<char*, XIM)> lXLocaleOfIM("XLocaleOfIM");
Hooker<XIC, XIM, ...)> lXCreateIC("XCreateIC");
Hooker<void, XIC)> lXDestroyIC("XDestroyIC");
Hooker<void, XIC)> lXSetICFocus("XSetICFocus");
Hooker<void, XIC)> lXUnsetICFocus("XUnsetICFocus");
Hooker<wchar_t*, XIC)> lXwcResetIC("XwcResetIC");
Hooker<char*, XIC)> lXmbResetIC("XmbResetIC");
Hooker<char*, XIC)> lXutf8ResetIC("Xutf8ResetIC");
Hooker<char*, XIC, ...)> lXSetICValues("XSetICValues");
Hooker<char*, XIC, ...)> lXGetICValues("XGetICValues");
Hooker<XIM, XIC)> lXIMOfIC("XIMOfIC");
Hooker<int, XEvent*, Window)> lXFilterEvent("XFilterEvent");
Hooker<int, XIC, XKeyPressedEvent*, char*, int, KeySym*, int*> lXmbLookupString("XmbLookupString");
Hooker<int, XIC, XKeyPressedEvent*, wchar_t*, int, KeySym*, int*> lXwcLookupString("XwcLookupString");
Hooker<int, XIC, XKeyPressedEvent*, char*, int, KeySym*, int*> lXutf8LookupString("Xutf8LookupString");
Hooker<XVaNestedList, int, ...)> lXVaCreateNestedList("XVaCreateNestedList");
Hooker<int, Display*, char*, char*, XIDProc, XPointer)> lXRegisterIMInstantiateCallback("XRegisterIMInstantiateCallback");
Hooker<int, Display*, char*, char*, XIDProc, XPointer)> lXUnregisterIMInstantiateCallback("XUnregisterIMInstantiateCallback");
Hooker<int, Display*, int*, int*> lXInternalConnectionNumbers("XInternalConnectionNumbers");
Hooker<void, Display*, int)> lXProcessInternalConnection("XProcessInternalConnection");
Hooker<int, Display*, XConnectionWatchProc, XPointer)> lXAddConnectionWatch("XAddConnectionWatch");
Hooker<void, Display*, XConnectionWatchProc, XPointer)> lXRemoveConnectionWatch("XRemoveConnectionWatch");
Hooker<void, char *, int, char *, int)> lXSetAuthorization("XSetAuthorization");
Hooker<int, wchar_t *, char *, int)> l_Xmbtowc("_Xmbtowc");
Hooker<int, char *, wchar_t)> l_Xwctomb("_Xwctomb");
Hooker<int, Display*, XGenericEventCookie*> lXGetEventData("XGetEventData");
Hooker<void, Display*, XGenericEventCookie*> lXFreeEventData("XFreeEventData");
Hooker<XClassHint*> lXAllocClassHint("XAllocClassHint");
Hooker<XIconSize*> lXAllocIconSize("XAllocIconSize");
Hooker<XSizeHints*> lXAllocSizeHints("XAllocSizeHints");
Hooker<XStandardColormap*> lXAllocStandardColormap("XAllocStandardColormap");
Hooker<XWMHints*> lXAllocWMHints("XAllocWMHints");
Hooker<int, Region, XRectangle*> lXClipBox("XClipBox");
Hooker<Region> lXCreateRegion("XCreateRegion");
Hooker<char*> lXDefaultString("XDefaultString");
Hooker<int, Display*, XID, XContext)> lXDeleteContext("XDeleteContext");
Hooker<int, Region)> lXDestroyRegion("XDestroyRegion");
Hooker<int, Region)> lXEmptyRegion("XEmptyRegion");
Hooker<int, Region, Region)> lXEqualRegion("XEqualRegion");
Hooker<int, Display*, XID, XContext, XPointer*> lXFindContext("XFindContext");
Hooker<int, Display*, Window, XClassHint*> lXGetClassHint("XGetClassHint");
Hooker<int, Display*, Window, XIconSize*, int*> lXGetIconSizes("XGetIconSizes");
Hooker<int, Display*, Window, XSizeHints*> lXGetNormalHints("XGetNormalHints");
Hooker<int, Display*, Window, XStandardColormap*, int*, Atom)> lXGetRGBColormaps("XGetRGBColormaps");
Hooker<int, Display*, Window, XSizeHints*, Atom)> lXGetSizeHints("XGetSizeHints");
Hooker<int, Display*, Window, XStandardColormap*, Atom)> lXGetStandardColormap("XGetStandardColormap");
Hooker<int, Display*, Window, XTextProperty*, Atom)> lXGetTextProperty("XGetTextProperty");
Hooker<XVisualInfo*, Display*, long, XVisualInfo*, int*> lXGetVisualInfo("XGetVisualInfo");
Hooker<int, Display*, Window, XTextProperty*> lXGetWMClientMachine("XGetWMClientMachine");
Hooker<XWMHints*, Display*, Window)> lXGetWMHints("XGetWMHints");
Hooker<int, Display*, Window, XTextProperty*> lXGetWMIconName("XGetWMIconName");
Hooker<int, Display*, Window, XTextProperty*> lXGetWMName("XGetWMName");
Hooker<int, Display*, Window, XSizeHints*, long*> lXGetWMNormalHints("XGetWMNormalHints");
Hooker<int, Display*, Window, XSizeHints*, long*, Atom)> lXGetWMSizeHints("XGetWMSizeHints");
Hooker<int, Display*, Window, XSizeHints*> lXGetZoomHints("XGetZoomHints");
Hooker<int, Region, Region, Region)> lXIntersectRegion("XIntersectRegion");
Hooker<void, KeySym, KeySym*, KeySym*> lXConvertCase("XConvertCase");
Hooker<int, XKeyEvent*, char*, int, KeySym*, XComposeStatus*> lXLookupString("XLookupString");
Hooker<int, Display*, int, int, int, XVisualInfo*> lXMatchVisualInfo("XMatchVisualInfo");
Hooker<int, Region, int, int)> lXOffsetRegion("XOffsetRegion");
Hooker<int, Region, int, int)> lXPointInRegion("XPointInRegion");
Hooker<Region, XPoint*, int, int)> lXPolygonRegion("XPolygonRegion");
Hooker<int, Region, int, int, unsigned, unsigned> lXRectInRegion("XRectInRegion");
Hooker<int, Display*, XID, XContext, char*> lXSaveContext("XSaveContext");
Hooker<int, Display*, Window, XClassHint*> lXSetClassHint("XSetClassHint");
Hooker<int, Display*, Window, XIconSize*, int)> lXSetIconSizes("XSetIconSizes");
Hooker<int, Display*, Window, XSizeHints*> lXSetNormalHints("XSetNormalHints");
Hooker<void, Display*, Window, XStandardColormap*, int, Atom)> lXSetRGBColormaps("XSetRGBColormaps");
Hooker<int, Display*, Window, XSizeHints*, Atom)> lXSetSizeHints("XSetSizeHints");
Hooker<int, Display*, Window, char*, char*, Pixmap, char*, int, XSizeHints*> lXSetStandardProperties("XSetStandardProperties");
Hooker<void, Display*, Window, XTextProperty*, Atom)> lXSetTextProperty("XSetTextProperty");
Hooker<void, Display*, Window, XTextProperty*> lXSetWMClientMachine("XSetWMClientMachine");
Hooker<int, Display*, Window, XWMHints*> lXSetWMHints("XSetWMHints");
Hooker<void, Display*, Window, XTextProperty*> lXSetWMIconName("XSetWMIconName");
Hooker<void, Display*, Window, XTextProperty*> lXSetWMName("XSetWMName");
Hooker<void, Display*, Window, XSizeHints*> lXSetWMNormalHints("XSetWMNormalHints");
Hooker<void, Display*, Window, XTextProperty*, XTextProperty*, char*, int, XSizeHints*, XWMHints*, XClassHint*> lXSetWMProperties("XSetWMProperties");
Hooker<void, Display*, Window, char*, char*, char*, int, XSizeHints*, XWMHints*, XClassHint*> lXmbSetWMProperties("XmbSetWMProperties");
Hooker<void, Display*, Window, char*, char*, char*, int, XSizeHints*, XWMHints*, XClassHint*> lXutf8SetWMProperties("Xutf8SetWMProperties");
Hooker<void, Display*, Window, XSizeHints*, Atom)> lXSetWMSizeHints("XSetWMSizeHints");
Hooker<int, Display*, GC, Region)> lXSetRegion("XSetRegion");
Hooker<void, Display*, Window, XStandardColormap*, Atom)> lXSetStandardColormap("XSetStandardColormap");
Hooker<int, Display*, Window, XSizeHints*> lXSetZoomHints("XSetZoomHints");
Hooker<int, Region, int, int)> lXShrinkRegion("XShrinkRegion");
Hooker<int, char*, int, XTextProperty*> lXStringListToTextProperty("XStringListToTextProperty");
Hooker<int, Region, Region, Region)> lXSubtractRegion("XSubtractRegion");
Hooker<int, Display*, char*, int, XICCEncodingStyle, )> lXmbTextListToTextProperty("XmbTextListToTextProperty");
Hooker<int, Display*, wchar_t*, int, XICCEncodingStyle, )> lXwcTextListToTextProperty("XwcTextListToTextProperty");
Hooker<int, Display*, char*, int, XICCEncodingStyle, )> lXutf8TextListToTextProperty("Xutf8TextListToTextProperty");
Hooker<void, wchar_t*> lXwcFreeStringList("XwcFreeStringList");
Hooker<int, XTextProperty*, char*, int*> lXTextPropertyToStringList("XTextPropertyToStringList");
Hooker<int, Display*, XTextProperty*, )> lXmbTextPropertyToTextList("XmbTextPropertyToTextList");
Hooker<int, Display*, XTextProperty*, )> lXwcTextPropertyToTextList("XwcTextPropertyToTextList");
Hooker<int, Display*, XTextProperty*, )> lXutf8TextPropertyToTextList("Xutf8TextPropertyToTextList");
Hooker<int, XRectangle*, Region, Region)> lXUnionRectWithRegion("XUnionRectWithRegion");
Hooker<int, Region, Region, Region)> lXUnionRegion("XUnionRegion");
Hooker<int, Display*, int, char*, char*, unsigned, XSizeHints*, int*, int*, int*, int*, int*> lXWMGeometry("XWMGeometry");
Hooker<int, Region, Region, Region)> lXXorRegion("XXorRegion");
Hooker<void, GLfloat> lglClearIndex("glClearIndex");
Hooker<void, GLclampf, GLclampf, GLclampf, GLclampf> lglClearColor("glClearColor");
Hooker<void, GLbitfield> lglClear("glClear");
Hooker<void, GLuint> lglIndexMask("glIndexMask");
Hooker<void, GLboolean, GLboolean, GLboolean, GLboolean> lglColorMask("glColorMask");
Hooker<void, GLenum, GLclampf> lglAlphaFunc("glAlphaFunc");
Hooker<void, GLenum, GLenum> lglBlendFunc("glBlendFunc");
Hooker<void, GLenum> lglLogicOp("glLogicOp");
Hooker<void, GLenum> lglCullFace("glCullFace");
Hooker<void, GLenum> lglFrontFace("glFrontFace");
Hooker<void, GLfloat> lglPointSize("glPointSize");
Hooker<void, GLfloat> lglLineWidth("glLineWidth");
Hooker<void, GLint, GLushort> lglLineStipple("glLineStipple");
Hooker<void, GLenum, GLenum> lglPolygonMode("glPolygonMode");
Hooker<void, GLfloat, GLfloat> lglPolygonOffset("glPolygonOffset");
Hooker<void, GLubyte *> lglPolygonStipple("glPolygonStipple");
Hooker<void, GLubyte *> lglGetPolygonStipple("glGetPolygonStipple");
Hooker<void, GLboolean> lglEdgeFlag("glEdgeFlag");
Hooker<void, GLboolean *> lglEdgeFlagv("glEdgeFlagv");
Hooker<void, GLint, GLint, GLsizei, GLsizei> lglScissor("glScissor");
Hooker<void, GLenum, GLdouble *> lglClipPlane("glClipPlane");
Hooker<void, GLenum, GLdouble *> lglGetClipPlane("glGetClipPlane");
Hooker<void, GLenum> lglDrawBuffer("glDrawBuffer");
Hooker<void, GLenum> lglReadBuffer("glReadBuffer");
Hooker<void, GLenum> lglEnable("glEnable");
Hooker<void, GLenum> lglDisable("glDisable");
Hooker<GLboolean, GLenum> lglIsEnabled("glIsEnabled");
Hooker<void, GLenum> lglEnableClientState("glEnableClientState");
Hooker<void, GLenum> lglDisableClientState("glDisableClientState");
Hooker<void, GLenum, GLboolean *> lglGetBooleanv("glGetBooleanv");
Hooker<void, GLenum, GLdouble *> lglGetDoublev("glGetDoublev");
Hooker<void, GLenum, GLfloat *> lglGetFloatv("glGetFloatv");
Hooker<void, GLenum, GLint *> lglGetIntegerv("glGetIntegerv");
Hooker<void, GLbitfield> lglPushAttrib("glPushAttrib");
Hooker<void> lglPopAttrib("glPopAttrib");
Hooker<void, GLbitfield> lglPushClientAttrib("glPushClientAttrib");
Hooker<void> lglPopClientAttrib("glPopClientAttrib");
Hooker<GLint, GLenum> lglRenderMode("glRenderMode");
Hooker<GLenum> lglGetError("glGetError");
Hooker<GLubyte*, GLenum> lglGetString("glGetString");
Hooker<void> lglFinish("glFinish");
Hooker<void> lglFlush("glFlush");
Hooker<void, GLenum, GLenum> lglHint("glHint");
Hooker<void, GLclampd> lglClearDepth("glClearDepth");
Hooker<void, GLenum> lglDepthFunc("glDepthFunc");
Hooker<void, GLboolean> lglDepthMask("glDepthMask");
Hooker<void, GLclampd, GLclampd> lglDepthRange("glDepthRange");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglClearAccum("glClearAccum");
Hooker<void, GLenum, GLfloat> lglAccum("glAccum");
Hooker<void, GLenum> lglMatrixMode("glMatrixMode");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble> lglOrtho("glOrtho");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble> lglFrustum("glFrustum");
Hooker<void, GLint, GLint, GLsizei, GLsizei> lglViewport("glViewport");
Hooker<void> lglPushMatrix("glPushMatrix");
Hooker<void> lglPopMatrix("glPopMatrix");
Hooker<void> lglLoadIdentity("glLoadIdentity");
Hooker<void, GLdouble *> lglLoadMatrixd("glLoadMatrixd");
Hooker<void, GLfloat *> lglLoadMatrixf("glLoadMatrixf");
Hooker<void, GLdouble *> lglMultMatrixd("glMultMatrixd");
Hooker<void, GLfloat *> lglMultMatrixf("glMultMatrixf");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble> lglRotated("glRotated");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglRotatef("glRotatef");
Hooker<void, GLdouble, GLdouble, GLdouble> lglScaled("glScaled");
Hooker<void, GLfloat, GLfloat, GLfloat> lglScalef("glScalef");
Hooker<void, GLdouble, GLdouble, GLdouble> lglTranslated("glTranslated");
Hooker<void, GLfloat, GLfloat, GLfloat> lglTranslatef("glTranslatef");
Hooker<GLboolean, GLuint> lglIsList("glIsList");
Hooker<void, GLuint, GLsizei> lglDeleteLists("glDeleteLists");
Hooker<GLuint, GLsizei> lglGenLists("glGenLists");
Hooker<void, GLuint, GLenum> lglNewList("glNewList");
Hooker<void> lglEndList("glEndList");
Hooker<void, GLuint> lglCallList("glCallList");
Hooker<void, GLsizei, GLenum> lglCallLists("glCallLists");
Hooker<void, GLuint> lglListBase("glListBase");
Hooker<void, GLenum> lglBegin("glBegin");
Hooker<void> lglEnd("glEnd");
Hooker<void, GLdouble, GLdouble> lglVertex2d("glVertex2d");
Hooker<void, GLfloat, GLfloat> lglVertex2f("glVertex2f");
Hooker<void, GLint, GLint> lglVertex2i("glVertex2i");
Hooker<void, GLshort, GLshort> lglVertex2s("glVertex2s");
Hooker<void, GLdouble, GLdouble, GLdouble> lglVertex3d("glVertex3d");
Hooker<void, GLfloat, GLfloat, GLfloat> lglVertex3f("glVertex3f");
Hooker<void, GLint, GLint, GLint> lglVertex3i("glVertex3i");
Hooker<void, GLshort, GLshort, GLshort> lglVertex3s("glVertex3s");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble> lglVertex4d("glVertex4d");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglVertex4f("glVertex4f");
Hooker<void, GLint, GLint, GLint, GLint> lglVertex4i("glVertex4i");
Hooker<void, GLshort, GLshort, GLshort, GLshort> lglVertex4s("glVertex4s");
Hooker<void, GLdouble *> lglVertex2dv("glVertex2dv");
Hooker<void, GLfloat *> lglVertex2fv("glVertex2fv");
Hooker<void, GLint *> lglVertex2iv("glVertex2iv");
Hooker<void, GLshort *> lglVertex2sv("glVertex2sv");
Hooker<void, GLdouble *> lglVertex3dv("glVertex3dv");
Hooker<void, GLfloat *> lglVertex3fv("glVertex3fv");
Hooker<void, GLint *> lglVertex3iv("glVertex3iv");
Hooker<void, GLshort *> lglVertex3sv("glVertex3sv");
Hooker<void, GLdouble *> lglVertex4dv("glVertex4dv");
Hooker<void, GLfloat *> lglVertex4fv("glVertex4fv");
Hooker<void, GLint *> lglVertex4iv("glVertex4iv");
Hooker<void, GLshort *> lglVertex4sv("glVertex4sv");
Hooker<void, GLbyte, GLbyte, GLbyte> lglNormal3b("glNormal3b");
Hooker<void, GLdouble, GLdouble, GLdouble> lglNormal3d("glNormal3d");
Hooker<void, GLfloat, GLfloat, GLfloat> lglNormal3f("glNormal3f");
Hooker<void, GLint, GLint, GLint> lglNormal3i("glNormal3i");
Hooker<void, GLshort, GLshort, GLshort> lglNormal3s("glNormal3s");
Hooker<void, GLbyte *> lglNormal3bv("glNormal3bv");
Hooker<void, GLdouble *> lglNormal3dv("glNormal3dv");
Hooker<void, GLfloat *> lglNormal3fv("glNormal3fv");
Hooker<void, GLint *> lglNormal3iv("glNormal3iv");
Hooker<void, GLshort *> lglNormal3sv("glNormal3sv");
Hooker<void, GLdouble> lglIndexd("glIndexd");
Hooker<void, GLfloat> lglIndexf("glIndexf");
Hooker<void, GLint> lglIndexi("glIndexi");
Hooker<void, GLshort> lglIndexs("glIndexs");
Hooker<void, GLubyte> lglIndexub("glIndexub");
Hooker<void, GLdouble *> lglIndexdv("glIndexdv");
Hooker<void, GLfloat *> lglIndexfv("glIndexfv");
Hooker<void, GLint *> lglIndexiv("glIndexiv");
Hooker<void, GLshort *> lglIndexsv("glIndexsv");
Hooker<void, GLubyte *> lglIndexubv("glIndexubv");
Hooker<void, GLbyte, GLbyte, GLbyte> lglColor3b("glColor3b");
Hooker<void, GLdouble, GLdouble, GLdouble> lglColor3d("glColor3d");
Hooker<void, GLfloat, GLfloat, GLfloat> lglColor3f("glColor3f");
Hooker<void, GLint, GLint, GLint> lglColor3i("glColor3i");
Hooker<void, GLshort, GLshort, GLshort> lglColor3s("glColor3s");
Hooker<void, GLubyte, GLubyte, GLubyte> lglColor3ub("glColor3ub");
Hooker<void, GLuint, GLuint, GLuint> lglColor3ui("glColor3ui");
Hooker<void, GLushort, GLushort, GLushort> lglColor3us("glColor3us");
Hooker<void, GLbyte, GLbyte, GLbyte, GLbyte> lglColor4b("glColor4b");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble> lglColor4d("glColor4d");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglColor4f("glColor4f");
Hooker<void, GLint, GLint, GLint, GLint> lglColor4i("glColor4i");
Hooker<void, GLshort, GLshort, GLshort, GLshort> lglColor4s("glColor4s");
Hooker<void, GLubyte, GLubyte, GLubyte, GLubyte> lglColor4ub("glColor4ub");
Hooker<void, GLuint, GLuint, GLuint, GLuint> lglColor4ui("glColor4ui");
Hooker<void, GLushort, GLushort, GLushort, GLushort> lglColor4us("glColor4us");
Hooker<void, GLbyte *> lglColor3bv("glColor3bv");
Hooker<void, GLdouble *> lglColor3dv("glColor3dv");
Hooker<void, GLfloat *> lglColor3fv("glColor3fv");
Hooker<void, GLint *> lglColor3iv("glColor3iv");
Hooker<void, GLshort *> lglColor3sv("glColor3sv");
Hooker<void, GLubyte *> lglColor3ubv("glColor3ubv");
Hooker<void, GLuint *> lglColor3uiv("glColor3uiv");
Hooker<void, GLushort *> lglColor3usv("glColor3usv");
Hooker<void, GLbyte *> lglColor4bv("glColor4bv");
Hooker<void, GLdouble *> lglColor4dv("glColor4dv");
Hooker<void, GLfloat *> lglColor4fv("glColor4fv");
Hooker<void, GLint *> lglColor4iv("glColor4iv");
Hooker<void, GLshort *> lglColor4sv("glColor4sv");
Hooker<void, GLubyte *> lglColor4ubv("glColor4ubv");
Hooker<void, GLuint *> lglColor4uiv("glColor4uiv");
Hooker<void, GLushort *> lglColor4usv("glColor4usv");
Hooker<void, GLdouble> lglTexCoord1d("glTexCoord1d");
Hooker<void, GLfloat> lglTexCoord1f("glTexCoord1f");
Hooker<void, GLint> lglTexCoord1i("glTexCoord1i");
Hooker<void, GLshort> lglTexCoord1s("glTexCoord1s");
Hooker<void, GLdouble, GLdouble> lglTexCoord2d("glTexCoord2d");
Hooker<void, GLfloat, GLfloat> lglTexCoord2f("glTexCoord2f");
Hooker<void, GLint, GLint> lglTexCoord2i("glTexCoord2i");
Hooker<void, GLshort, GLshort> lglTexCoord2s("glTexCoord2s");
Hooker<void, GLdouble, GLdouble, GLdouble> lglTexCoord3d("glTexCoord3d");
Hooker<void, GLfloat, GLfloat, GLfloat> lglTexCoord3f("glTexCoord3f");
Hooker<void, GLint, GLint, GLint> lglTexCoord3i("glTexCoord3i");
Hooker<void, GLshort, GLshort, GLshort> lglTexCoord3s("glTexCoord3s");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble> lglTexCoord4d("glTexCoord4d");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglTexCoord4f("glTexCoord4f");
Hooker<void, GLint, GLint, GLint, GLint> lglTexCoord4i("glTexCoord4i");
Hooker<void, GLshort, GLshort, GLshort, GLshort> lglTexCoord4s("glTexCoord4s");
Hooker<void, GLdouble *> lglTexCoord1dv("glTexCoord1dv");
Hooker<void, GLfloat *> lglTexCoord1fv("glTexCoord1fv");
Hooker<void, GLint *> lglTexCoord1iv("glTexCoord1iv");
Hooker<void, GLshort *> lglTexCoord1sv("glTexCoord1sv");
Hooker<void, GLdouble *> lglTexCoord2dv("glTexCoord2dv");
Hooker<void, GLfloat *> lglTexCoord2fv("glTexCoord2fv");
Hooker<void, GLint *> lglTexCoord2iv("glTexCoord2iv");
Hooker<void, GLshort *> lglTexCoord2sv("glTexCoord2sv");
Hooker<void, GLdouble *> lglTexCoord3dv("glTexCoord3dv");
Hooker<void, GLfloat *> lglTexCoord3fv("glTexCoord3fv");
Hooker<void, GLint *> lglTexCoord3iv("glTexCoord3iv");
Hooker<void, GLshort *> lglTexCoord3sv("glTexCoord3sv");
Hooker<void, GLdouble *> lglTexCoord4dv("glTexCoord4dv");
Hooker<void, GLfloat *> lglTexCoord4fv("glTexCoord4fv");
Hooker<void, GLint *> lglTexCoord4iv("glTexCoord4iv");
Hooker<void, GLshort *> lglTexCoord4sv("glTexCoord4sv");
Hooker<void, GLdouble, GLdouble> lglRasterPos2d("glRasterPos2d");
Hooker<void, GLfloat, GLfloat> lglRasterPos2f("glRasterPos2f");
Hooker<void, GLint, GLint> lglRasterPos2i("glRasterPos2i");
Hooker<void, GLshort, GLshort> lglRasterPos2s("glRasterPos2s");
Hooker<void, GLdouble, GLdouble, GLdouble> lglRasterPos3d("glRasterPos3d");
Hooker<void, GLfloat, GLfloat, GLfloat> lglRasterPos3f("glRasterPos3f");
Hooker<void, GLint, GLint, GLint> lglRasterPos3i("glRasterPos3i");
Hooker<void, GLshort, GLshort, GLshort> lglRasterPos3s("glRasterPos3s");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble> lglRasterPos4d("glRasterPos4d");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglRasterPos4f("glRasterPos4f");
Hooker<void, GLint, GLint, GLint, GLint> lglRasterPos4i("glRasterPos4i");
Hooker<void, GLshort, GLshort, GLshort, GLshort> lglRasterPos4s("glRasterPos4s");
Hooker<void, GLdouble *> lglRasterPos2dv("glRasterPos2dv");
Hooker<void, GLfloat *> lglRasterPos2fv("glRasterPos2fv");
Hooker<void, GLint *> lglRasterPos2iv("glRasterPos2iv");
Hooker<void, GLshort *> lglRasterPos2sv("glRasterPos2sv");
Hooker<void, GLdouble *> lglRasterPos3dv("glRasterPos3dv");
Hooker<void, GLfloat *> lglRasterPos3fv("glRasterPos3fv");
Hooker<void, GLint *> lglRasterPos3iv("glRasterPos3iv");
Hooker<void, GLshort *> lglRasterPos3sv("glRasterPos3sv");
Hooker<void, GLdouble *> lglRasterPos4dv("glRasterPos4dv");
Hooker<void, GLfloat *> lglRasterPos4fv("glRasterPos4fv");
Hooker<void, GLint *> lglRasterPos4iv("glRasterPos4iv");
Hooker<void, GLshort *> lglRasterPos4sv("glRasterPos4sv");
Hooker<void, GLdouble, GLdouble, GLdouble, GLdouble> lglRectd("glRectd");
Hooker<void, GLfloat, GLfloat, GLfloat, GLfloat> lglRectf("glRectf");
Hooker<void, GLint, GLint, GLint, GLint> lglRecti("glRecti");
Hooker<void, GLshort, GLshort, GLshort, GLshort> lglRects("glRects");
Hooker<void, GLdouble *, GLdouble *> lglRectdv("glRectdv");
Hooker<void, GLfloat *, GLfloat *> lglRectfv("glRectfv");
Hooker<void, GLint *, GLint *> lglRectiv("glRectiv");
Hooker<void, GLshort *, GLshort *> lglRectsv("glRectsv");
Hooker<void, GLint, GLenum, GLsizei> lglVertexPointer("glVertexPointer");
Hooker<void, GLenum, GLsizei> lglNormalPointer("glNormalPointer");
Hooker<void, GLint, GLenum, GLsizei> lglColorPointer("glColorPointer");
Hooker<void, GLenum, GLsizei> lglIndexPointer("glIndexPointer");
Hooker<void, GLint, GLenum, GLsizei> lglTexCoordPointer("glTexCoordPointer");
Hooker<void, GLsizei> lglEdgeFlagPointer("glEdgeFlagPointer");
Hooker<void, GLenum> lglGetPointerv("glGetPointerv");
Hooker<void, GLint> lglArrayElement("glArrayElement");
Hooker<void, GLenum, GLint, GLsizei> lglDrawArrays("glDrawArrays");
Hooker<void, GLenum, GLsizei, GLenum> lglDrawElements("glDrawElements");
Hooker<void, GLenum, GLsizei> lglInterleavedArrays("glInterleavedArrays");
Hooker<void, GLenum> lglShadeModel("glShadeModel");
Hooker<void, GLenum, GLenum, GLfloat> lglLightf("glLightf");
Hooker<void, GLenum, GLenum, GLint> lglLighti("glLighti");
Hooker<void, GLenum, GLenum, GLfloat *> lglLightfv("glLightfv");
Hooker<void, GLenum, GLenum, GLint *> lglLightiv("glLightiv");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetLightfv("glGetLightfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetLightiv("glGetLightiv");
Hooker<void, GLenum, GLfloat> lglLightModelf("glLightModelf");
Hooker<void, GLenum, GLint> lglLightModeli("glLightModeli");
Hooker<void, GLenum, GLfloat *> lglLightModelfv("glLightModelfv");
Hooker<void, GLenum, GLint *> lglLightModeliv("glLightModeliv");
Hooker<void, GLenum, GLenum, GLfloat> lglMaterialf("glMaterialf");
Hooker<void, GLenum, GLenum, GLint> lglMateriali("glMateriali");
Hooker<void, GLenum, GLenum, GLfloat *> lglMaterialfv("glMaterialfv");
Hooker<void, GLenum, GLenum, GLint *> lglMaterialiv("glMaterialiv");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetMaterialfv("glGetMaterialfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetMaterialiv("glGetMaterialiv");
Hooker<void, GLenum, GLenum> lglColorMaterial("glColorMaterial");
Hooker<void, GLfloat, GLfloat> lglPixelZoom("glPixelZoom");
Hooker<void, GLenum, GLfloat> lglPixelStoref("glPixelStoref");
Hooker<void, GLenum, GLint> lglPixelStorei("glPixelStorei");
Hooker<void, GLenum, GLfloat> lglPixelTransferf("glPixelTransferf");
Hooker<void, GLenum, GLint> lglPixelTransferi("glPixelTransferi");
Hooker<void, GLenum, GLsizei, GLfloat *> lglPixelMapfv("glPixelMapfv");
Hooker<void, GLenum, GLsizei, GLuint *> lglPixelMapuiv("glPixelMapuiv");
Hooker<void, GLenum, GLsizei, GLushort *> lglPixelMapusv("glPixelMapusv");
Hooker<void, GLenum, GLfloat *> lglGetPixelMapfv("glGetPixelMapfv");
Hooker<void, GLenum, GLuint *> lglGetPixelMapuiv("glGetPixelMapuiv");
Hooker<void, GLenum, GLushort *> lglGetPixelMapusv("glGetPixelMapusv");
Hooker<void, GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, GLubyte *> lglBitmap("glBitmap");
Hooker<void, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum> lglReadPixels("glReadPixels");
Hooker<void, GLsizei, GLsizei, GLenum, GLenum> lglDrawPixels("glDrawPixels");
Hooker<void, GLint, GLint, GLsizei, GLsizei, GLenum> lglCopyPixels("glCopyPixels");
Hooker<void, GLenum, GLint, GLuint> lglStencilFunc("glStencilFunc");
Hooker<void, GLuint> lglStencilMask("glStencilMask");
Hooker<void, GLenum, GLenum, GLenum> lglStencilOp("glStencilOp");
Hooker<void, GLint> lglClearStencil("glClearStencil");
Hooker<void, GLenum, GLenum, GLdouble> lglTexGend("glTexGend");
Hooker<void, GLenum, GLenum, GLfloat> lglTexGenf("glTexGenf");
Hooker<void, GLenum, GLenum, GLint> lglTexGeni("glTexGeni");
Hooker<void, GLenum, GLenum, GLdouble *> lglTexGendv("glTexGendv");
Hooker<void, GLenum, GLenum, GLfloat *> lglTexGenfv("glTexGenfv");
Hooker<void, GLenum, GLenum, GLint *> lglTexGeniv("glTexGeniv");
Hooker<void, GLenum, GLenum, GLdouble *> lglGetTexGendv("glGetTexGendv");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetTexGenfv("glGetTexGenfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetTexGeniv("glGetTexGeniv");
Hooker<void, GLenum, GLenum, GLfloat> lglTexEnvf("glTexEnvf");
Hooker<void, GLenum, GLenum, GLint> lglTexEnvi("glTexEnvi");
Hooker<void, GLenum, GLenum, GLfloat *> lglTexEnvfv("glTexEnvfv");
Hooker<void, GLenum, GLenum, GLint *> lglTexEnviv("glTexEnviv");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetTexEnvfv("glGetTexEnvfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetTexEnviv("glGetTexEnviv");
Hooker<void, GLenum, GLenum, GLfloat> lglTexParameterf("glTexParameterf");
Hooker<void, GLenum, GLenum, GLint> lglTexParameteri("glTexParameteri");
Hooker<void, GLenum, GLenum, GLfloat *> lglTexParameterfv("glTexParameterfv");
Hooker<void, GLenum, GLenum, GLint *> lglTexParameteriv("glTexParameteriv");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetTexParameterfv("glGetTexParameterfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetTexParameteriv("glGetTexParameteriv");
Hooker<void, GLenum, GLint, GLenum, GLfloat *> lglGetTexLevelParameterfv("glGetTexLevelParameterfv");
Hooker<void, GLenum, GLint, GLenum, GLint *> lglGetTexLevelParameteriv("glGetTexLevelParameteriv");
Hooker<void, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum> lglTexImage1D("glTexImage1D");
Hooker<void, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum> lglTexImage2D("glTexImage2D");
Hooker<void, GLenum, GLint, GLenum, GLenum> lglGetTexImage("glGetTexImage");
Hooker<void, GLsizei, GLuint *> lglGenTextures("glGenTextures");
Hooker<void, GLsizei, GLuint *> lglDeleteTextures("glDeleteTextures");
Hooker<void, GLenum, GLuint> lglBindTexture("glBindTexture");
Hooker<void, GLsizei, GLuint *, GLclampf *> lglPrioritizeTextures("glPrioritizeTextures");
Hooker<GLboolean, GLsizei, GLuint *, GLboolean *> lglAreTexturesResident("glAreTexturesResident");
Hooker<GLboolean, GLuint> lglIsTexture("glIsTexture");
Hooker<void, GLenum, GLint, GLint, GLsizei, GLenum, GLenum> lglTexSubImage1D("glTexSubImage1D");
Hooker<void, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum> lglTexSubImage2D("glTexSubImage2D");
Hooker<void, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint> lglCopyTexImage1D("glCopyTexImage1D");
Hooker<void, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint> lglCopyTexImage2D("glCopyTexImage2D");
Hooker<void, GLenum, GLint, GLint, GLint, GLint, GLsizei> lglCopyTexSubImage1D("glCopyTexSubImage1D");
Hooker<void, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei> lglCopyTexSubImage2D("glCopyTexSubImage2D");
Hooker<void, GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble *> lglMap1d("glMap1d");
Hooker<void, GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat *> lglMap1f("glMap1f");
Hooker<void, GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble *> lglMap2d("glMap2d");
Hooker<void, GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat *> lglMap2f("glMap2f");
Hooker<void, GLenum, GLenum, GLdouble *> lglGetMapdv("glGetMapdv");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetMapfv("glGetMapfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetMapiv("glGetMapiv");
Hooker<void, GLdouble> lglEvalCoord1d("glEvalCoord1d");
Hooker<void, GLfloat> lglEvalCoord1f("glEvalCoord1f");
Hooker<void, GLdouble *> lglEvalCoord1dv("glEvalCoord1dv");
Hooker<void, GLfloat *> lglEvalCoord1fv("glEvalCoord1fv");
Hooker<void, GLdouble, GLdouble> lglEvalCoord2d("glEvalCoord2d");
Hooker<void, GLfloat, GLfloat> lglEvalCoord2f("glEvalCoord2f");
Hooker<void, GLdouble *> lglEvalCoord2dv("glEvalCoord2dv");
Hooker<void, GLfloat *> lglEvalCoord2fv("glEvalCoord2fv");
Hooker<void, GLint, GLdouble, GLdouble> lglMapGrid1d("glMapGrid1d");
Hooker<void, GLint, GLfloat, GLfloat> lglMapGrid1f("glMapGrid1f");
Hooker<void, GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble> lglMapGrid2d("glMapGrid2d");
Hooker<void, GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat> lglMapGrid2f("glMapGrid2f");
Hooker<void, GLint> lglEvalPoint1("glEvalPoint1");
Hooker<void, GLint, GLint> lglEvalPoint2("glEvalPoint2");
Hooker<void, GLenum, GLint, GLint> lglEvalMesh1("glEvalMesh1");
Hooker<void, GLenum, GLint, GLint, GLint, GLint> lglEvalMesh2("glEvalMesh2");
Hooker<void, GLenum, GLfloat> lglFogf("glFogf");
Hooker<void, GLenum, GLint> lglFogi("glFogi");
Hooker<void, GLenum, GLfloat *> lglFogfv("glFogfv");
Hooker<void, GLenum, GLint *> lglFogiv("glFogiv");
Hooker<void, GLsizei, GLenum, GLfloat *> lglFeedbackBuffer("glFeedbackBuffer");
Hooker<void, GLfloat> lglPassThrough("glPassThrough");
Hooker<void, GLsizei, GLuint *> lglSelectBuffer("glSelectBuffer");
Hooker<void> lglInitNames("glInitNames");
Hooker<void, GLuint> lglLoadName("glLoadName");
Hooker<void, GLuint> lglPushName("glPushName");
Hooker<void> lglPopName("glPopName");
Hooker<void, GLenum, GLuint, GLuint, GLsizei, GLenum> lglDrawRangeElements("glDrawRangeElements");
Hooker<void, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum> lglTexImage3D("glTexImage3D");
Hooker<void, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum> lglTexSubImage3D("glTexSubImage3D");
Hooker<void, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei> lglCopyTexSubImage3D("glCopyTexSubImage3D");
Hooker<void, GLenum, GLenum, GLsizei, GLenum, GLenum> lglColorTable("glColorTable");
Hooker<void, GLenum, GLsizei, GLsizei, GLenum, GLenum> lglColorSubTable("glColorSubTable");
Hooker<void, GLenum, GLenum, GLint *> lglColorTableParameteriv("glColorTableParameteriv");
Hooker<void, GLenum, GLenum, GLfloat *> lglColorTableParameterfv("glColorTableParameterfv");
Hooker<void, GLenum, GLsizei, GLint, GLint, GLsizei> lglCopyColorSubTable("glCopyColorSubTable");
Hooker<void, GLenum, GLenum, GLint, GLint, GLsizei> lglCopyColorTable("glCopyColorTable");
Hooker<void, GLenum, GLenum, GLenum> lglGetColorTable("glGetColorTable");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetColorTableParameterfv("glGetColorTableParameterfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetColorTableParameteriv("glGetColorTableParameteriv");
Hooker<void, GLenum> lglBlendEquation("glBlendEquation");
Hooker<void, GLclampf, GLclampf, GLclampf, GLclampf> lglBlendColor("glBlendColor");
Hooker<void, GLenum, GLsizei, GLenum, GLboolean> lglHistogram("glHistogram");
Hooker<void, GLenum> lglResetHistogram("glResetHistogram");
Hooker<void, GLenum, GLboolean, GLenum, GLenum> lglGetHistogram("glGetHistogram");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetHistogramParameterfv("glGetHistogramParameterfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetHistogramParameteriv("glGetHistogramParameteriv");
Hooker<void, GLenum, GLenum, GLboolean> lglMinmax("glMinmax");
Hooker<void, GLenum> lglResetMinmax("glResetMinmax");
Hooker<void, GLenum, GLboolean, GLenum, GLenum> lglGetMinmax("glGetMinmax");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetMinmaxParameterfv("glGetMinmaxParameterfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetMinmaxParameteriv("glGetMinmaxParameteriv");
Hooker<void, GLenum, GLenum, GLsizei, GLenum, GLenum> lglConvolutionFilter1D("glConvolutionFilter1D");
Hooker<void, GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum> lglConvolutionFilter2D("glConvolutionFilter2D");
Hooker<void, GLenum, GLenum, GLfloat> lglConvolutionParameterf("glConvolutionParameterf");
Hooker<void, GLenum, GLenum, GLfloat *> lglConvolutionParameterfv("glConvolutionParameterfv");
Hooker<void, GLenum, GLenum, GLint> lglConvolutionParameteri("glConvolutionParameteri");
Hooker<void, GLenum, GLenum, GLint *> lglConvolutionParameteriv("glConvolutionParameteriv");
Hooker<void, GLenum, GLenum, GLint, GLint, GLsizei> lglCopyConvolutionFilter1D("glCopyConvolutionFilter1D");
Hooker<void, GLenum, GLenum, GLint, GLint, GLsizei, GLsizei> lglCopyConvolutionFilter2D("glCopyConvolutionFilter2D");
Hooker<void, GLenum, GLenum, GLenum> lglGetConvolutionFilter("glGetConvolutionFilter");
Hooker<void, GLenum, GLenum, GLfloat *> lglGetConvolutionParameterfv("glGetConvolutionParameterfv");
Hooker<void, GLenum, GLenum, GLint *> lglGetConvolutionParameteriv("glGetConvolutionParameteriv");
Hooker<void, GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum> lglSeparableFilter2D("glSeparableFilter2D");
Hooker<void, GLenum, GLenum, GLenum> lglGetSeparableFilter("glGetSeparableFilter");
Hooker<void, GLenum> lglActiveTexture("glActiveTexture");
Hooker<void, GLenum> lglClientActiveTexture("glClientActiveTexture");
Hooker<void, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei> lglCompressedTexImage1D("glCompressedTexImage1D");
Hooker<void, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei> lglCompressedTexImage2D("glCompressedTexImage2D");
Hooker<void, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei> lglCompressedTexImage3D("glCompressedTexImage3D");
Hooker<void, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei> lglCompressedTexSubImage1D("glCompressedTexSubImage1D");
Hooker<void, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei> lglCompressedTexSubImage2D("glCompressedTexSubImage2D");
Hooker<void, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei> lglCompressedTexSubImage3D("glCompressedTexSubImage3D");
Hooker<void, GLenum, GLint> lglGetCompressedTexImage("glGetCompressedTexImage");
Hooker<void, GLenum, GLdouble> lglMultiTexCoord1d("glMultiTexCoord1d");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord1dv("glMultiTexCoord1dv");
Hooker<void, GLenum, GLfloat> lglMultiTexCoord1f("glMultiTexCoord1f");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord1fv("glMultiTexCoord1fv");
Hooker<void, GLenum, GLint> lglMultiTexCoord1i("glMultiTexCoord1i");
Hooker<void, GLenum, GLint *> lglMultiTexCoord1iv("glMultiTexCoord1iv");
Hooker<void, GLenum, GLshort> lglMultiTexCoord1s("glMultiTexCoord1s");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord1sv("glMultiTexCoord1sv");
Hooker<void, GLenum, GLdouble, GLdouble> lglMultiTexCoord2d("glMultiTexCoord2d");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord2dv("glMultiTexCoord2dv");
Hooker<void, GLenum, GLfloat, GLfloat> lglMultiTexCoord2f("glMultiTexCoord2f");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord2fv("glMultiTexCoord2fv");
Hooker<void, GLenum, GLint, GLint> lglMultiTexCoord2i("glMultiTexCoord2i");
Hooker<void, GLenum, GLint *> lglMultiTexCoord2iv("glMultiTexCoord2iv");
Hooker<void, GLenum, GLshort, GLshort> lglMultiTexCoord2s("glMultiTexCoord2s");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord2sv("glMultiTexCoord2sv");
Hooker<void, GLenum, GLdouble, GLdouble, GLdouble> lglMultiTexCoord3d("glMultiTexCoord3d");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord3dv("glMultiTexCoord3dv");
Hooker<void, GLenum, GLfloat, GLfloat, GLfloat> lglMultiTexCoord3f("glMultiTexCoord3f");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord3fv("glMultiTexCoord3fv");
Hooker<void, GLenum, GLint, GLint, GLint> lglMultiTexCoord3i("glMultiTexCoord3i");
Hooker<void, GLenum, GLint *> lglMultiTexCoord3iv("glMultiTexCoord3iv");
Hooker<void, GLenum, GLshort, GLshort, GLshort> lglMultiTexCoord3s("glMultiTexCoord3s");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord3sv("glMultiTexCoord3sv");
Hooker<void, GLenum, GLdouble, GLdouble, GLdouble, GLdouble> lglMultiTexCoord4d("glMultiTexCoord4d");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord4dv("glMultiTexCoord4dv");
Hooker<void, GLenum, GLfloat, GLfloat, GLfloat, GLfloat> lglMultiTexCoord4f("glMultiTexCoord4f");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord4fv("glMultiTexCoord4fv");
Hooker<void, GLenum, GLint, GLint, GLint, GLint> lglMultiTexCoord4i("glMultiTexCoord4i");
Hooker<void, GLenum, GLint *> lglMultiTexCoord4iv("glMultiTexCoord4iv");
Hooker<void, GLenum, GLshort, GLshort, GLshort, GLshort> lglMultiTexCoord4s("glMultiTexCoord4s");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord4sv("glMultiTexCoord4sv");
Hooker<void, GLclampf, GLboolean> lglSampleCoverage("glSampleCoverage");
Hooker<void, GLenum> lglActiveTextureARB("glActiveTextureARB");
Hooker<void, GLenum> lglClientActiveTextureARB("glClientActiveTextureARB");
Hooker<void, GLenum, GLdouble> lglMultiTexCoord1dARB("glMultiTexCoord1dARB");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord1dvARB("glMultiTexCoord1dvARB");
Hooker<void, GLenum, GLfloat> lglMultiTexCoord1fARB("glMultiTexCoord1fARB");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord1fvARB("glMultiTexCoord1fvARB");
Hooker<void, GLenum, GLint> lglMultiTexCoord1iARB("glMultiTexCoord1iARB");
Hooker<void, GLenum, GLint *> lglMultiTexCoord1ivARB("glMultiTexCoord1ivARB");
Hooker<void, GLenum, GLshort> lglMultiTexCoord1sARB("glMultiTexCoord1sARB");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord1svARB("glMultiTexCoord1svARB");
Hooker<void, GLenum, GLdouble, GLdouble> lglMultiTexCoord2dARB("glMultiTexCoord2dARB");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord2dvARB("glMultiTexCoord2dvARB");
Hooker<void, GLenum, GLfloat, GLfloat> lglMultiTexCoord2fARB("glMultiTexCoord2fARB");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord2fvARB("glMultiTexCoord2fvARB");
Hooker<void, GLenum, GLint, GLint> lglMultiTexCoord2iARB("glMultiTexCoord2iARB");
Hooker<void, GLenum, GLint *> lglMultiTexCoord2ivARB("glMultiTexCoord2ivARB");
Hooker<void, GLenum, GLshort, GLshort> lglMultiTexCoord2sARB("glMultiTexCoord2sARB");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord2svARB("glMultiTexCoord2svARB");
Hooker<void, GLenum, GLdouble, GLdouble, GLdouble> lglMultiTexCoord3dARB("glMultiTexCoord3dARB");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord3dvARB("glMultiTexCoord3dvARB");
Hooker<void, GLenum, GLfloat, GLfloat, GLfloat> lglMultiTexCoord3fARB("glMultiTexCoord3fARB");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord3fvARB("glMultiTexCoord3fvARB");
Hooker<void, GLenum, GLint, GLint, GLint> lglMultiTexCoord3iARB("glMultiTexCoord3iARB");
Hooker<void, GLenum, GLint *> lglMultiTexCoord3ivARB("glMultiTexCoord3ivARB");
Hooker<void, GLenum, GLshort, GLshort, GLshort> lglMultiTexCoord3sARB("glMultiTexCoord3sARB");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord3svARB("glMultiTexCoord3svARB");
Hooker<void, GLenum, GLdouble, GLdouble, GLdouble, GLdouble> lglMultiTexCoord4dARB("glMultiTexCoord4dARB");
Hooker<void, GLenum, GLdouble *> lglMultiTexCoord4dvARB("glMultiTexCoord4dvARB");
Hooker<void, GLenum, GLfloat, GLfloat, GLfloat, GLfloat> lglMultiTexCoord4fARB("glMultiTexCoord4fARB");
Hooker<void, GLenum, GLfloat *> lglMultiTexCoord4fvARB("glMultiTexCoord4fvARB");
Hooker<void, GLenum, GLint, GLint, GLint, GLint> lglMultiTexCoord4iARB("glMultiTexCoord4iARB");
Hooker<void, GLenum, GLint *> lglMultiTexCoord4ivARB("glMultiTexCoord4ivARB");
Hooker<void, GLenum, GLshort, GLshort, GLshort, GLshort> lglMultiTexCoord4sARB("glMultiTexCoord4sARB");
Hooker<void, GLenum, GLshort *> lglMultiTexCoord4svARB("glMultiTexCoord4svARB");
Hooker<intmax_t, intmax_t> limaxabs("imaxabs");
Hooker<imaxdiv_t, intmax_t, intmax_t> limaxdiv("imaxdiv");
Hooker<intmax_t, char *, char *, int> lstrtoimax("strtoimax");
Hooker<uintmax_t, char *, char *, int> lstrtoumax("strtoumax");
Hooker<intmax_t, __gwchar_t *, __gwchar_t *, int> lwcstoimax("wcstoimax");
Hooker<uintmax_t, __gwchar_t *, __gwchar_t *, int> lwcstoumax("wcstoumax");
Hooker<void, GLenum, GLenum> lglBlendEquationSeparateATI("glBlendEquationSeparateATI");
Hooker<XVisualInfo*, Display *, int, int *> lglXChooseVisual("glXChooseVisual");
Hooker<GLXContext, Display *, XVisualInfo *, GLXContext, int> lglXCreateContext("glXCreateContext");
Hooker<void, Display *, GLXContext> lglXDestroyContext("glXDestroyContext");
Hooker<int, Display *, GLXDrawable, GLXContext> lglXMakeCurrent("glXMakeCurrent");
Hooker<void, Display *, GLXContext, GLXContext, unsigned> lglXCopyContext("glXCopyContext");
Hooker<void, Display *, GLXDrawable> lglXSwapBuffers("glXSwapBuffers");
Hooker<GLXPixmap, Display *, XVisualInfo *, Pixmap> lglXCreateGLXPixmap("glXCreateGLXPixmap");
Hooker<void, Display *, GLXPixmap> lglXDestroyGLXPixmap("glXDestroyGLXPixmap");
Hooker<int, Display *, int *, int *> lglXQueryExtension("glXQueryExtension");
Hooker<int, Display *, int *, int *> lglXQueryVersion("glXQueryVersion");
Hooker<int, Display *, GLXContext> lglXIsDirect("glXIsDirect");
Hooker<int, Display *, XVisualInfo *, int, int *> lglXGetConfig("glXGetConfig");
Hooker<GLXContext> lglXGetCurrentContext("glXGetCurrentContext");
Hooker<GLXDrawable> lglXGetCurrentDrawable("glXGetCurrentDrawable");
Hooker<void> lglXWaitGL("glXWaitGL");
Hooker<void> lglXWaitX("glXWaitX");
Hooker<void, Font, int, int, int> lglXUseXFont("glXUseXFont");
Hooker<char*, Display *, int> lglXQueryExtensionsString("glXQueryExtensionsString");
Hooker<char*, Display *, int, int> lglXQueryServerString("glXQueryServerString");
Hooker<char*, Display *, int> lglXGetClientString("glXGetClientString");
Hooker<Display*> lglXGetCurrentDisplay("glXGetCurrentDisplay");
Hooker<GLXFBConfig*, Display *, int, int *, int *> lglXChooseFBConfig("glXChooseFBConfig");
Hooker<int, Display *, GLXFBConfig, int, int *> lglXGetFBConfigAttrib("glXGetFBConfigAttrib");
Hooker<GLXFBConfig*, Display *, int, int *> lglXGetFBConfigs("glXGetFBConfigs");
Hooker<XVisualInfo*, Display *, GLXFBConfig> lglXGetVisualFromFBConfig("glXGetVisualFromFBConfig");
Hooker<GLXWindow, Display *, GLXFBConfig, Window, int *> lglXCreateWindow("glXCreateWindow");
Hooker<void, Display *, GLXWindow> lglXDestroyWindow("glXDestroyWindow");
Hooker<GLXPixmap, Display *, GLXFBConfig, Pixmap, int *> lglXCreatePixmap("glXCreatePixmap");
Hooker<void, Display *, GLXPixmap> lglXDestroyPixmap("glXDestroyPixmap");
Hooker<GLXPbuffer, Display *, GLXFBConfig, int *> lglXCreatePbuffer("glXCreatePbuffer");
Hooker<void, Display *, GLXPbuffer> lglXDestroyPbuffer("glXDestroyPbuffer");
Hooker<void, Display *, GLXDrawable, int, unsigned int *> lglXQueryDrawable("glXQueryDrawable");
Hooker<GLXContext, Display *, GLXFBConfig, int, GLXContext, int> lglXCreateNewContext("glXCreateNewContext");
Hooker<int, Display *, GLXDrawable, GLXDrawable, GLXContext> lglXMakeContextCurrent("glXMakeContextCurrent");
Hooker<GLXDrawable> lglXGetCurrentReadDrawable("glXGetCurrentReadDrawable");
Hooker<int, Display *, GLXContext, int, int *> lglXQueryContext("glXQueryContext");
Hooker<void, Display *, GLXDrawable, unsigned> lglXSelectEvent("glXSelectEvent");
Hooker<void, Display *, GLXDrawable, unsigned long *> lglXGetSelectedEvent("glXGetSelectedEvent");
Hooker<__GLXextFuncPtr, GLubyte *> lglXGetProcAddressARB("glXGetProcAddressARB");
Hooker<void, GLubyte *> lglXGetProcAddress("glXGetProcAddress");
Hooker<void*, GLsizei, GLfloat, GLfloat, GLfloat> lglXAllocateMemoryNV("glXAllocateMemoryNV");
Hooker<void> lglXFreeMemoryNV("glXFreeMemoryNV");
Hooker<int, Display *, GLXPbuffer, int> lglXBindTexImageARB("glXBindTexImageARB");
Hooker<int, Display *, GLXPbuffer, int> lglXReleaseTexImageARB("glXReleaseTexImageARB");
Hooker<int, Display *, GLXDrawable, int *> lglXDrawableAttribARB("glXDrawableAttribARB");
Hooker<int, Display *, GLXDrawable, float *> lglXGetFrameUsageMESA("glXGetFrameUsageMESA");
Hooker<int, Display *, GLXDrawable> lglXBeginFrameTrackingMESA("glXBeginFrameTrackingMESA");
Hooker<int, Display *, GLXDrawable> lglXEndFrameTrackingMESA("glXEndFrameTrackingMESA");
Hooker<int, Display *, GLXDrawable, int64_t *, int64_t *, float *> lglXQueryFrameTrackingMESA("glXQueryFrameTrackingMESA");
Hooker<int, unsigned> lglXSwapIntervalMESA("glXSwapIntervalMESA");
Hooker<int> lglXGetSwapIntervalMESA("glXGetSwapIntervalMESA");
Hooker<int, Display *, int, int, int, unsigned int *> lglXQueryRendererIntegerMESA("glXQueryRendererIntegerMESA");
Hooker<int, int, unsigned int *> lglXQueryCurrentRendererIntegerMESA("glXQueryCurrentRendererIntegerMESA");
Hooker<char*, Display *, int, int, int> lglXQueryRendererStringMESA("glXQueryRendererStringMESA");
Hooker<char*, int> lglXQueryCurrentRendererStringMESA("glXQueryCurrentRendererStringMESA");
